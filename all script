#!/bin/bash

# Ask the user to enter a path to their data
read -p "Please enter the path to your FAST5 data: " data

# Check if the entered path exists
if [ ! -d "$data" ]; then
    echo "The specified path does not exist. Please check and try again."
    exit 1
fi

# Create the workspace
mkdir -p methylation_analysis
cd methylation_analysis
echo "'methylation_analysis' folder is created"

# Create the Singularity image
mkdir -p image_singularity
cd image_singularity

singularity build fast5_to_pod5.sif docker://chrisamiller/pod5-tools:0.2.4 # Convertir FAST5 en POD5
singularity build dorado.sif docker://nanoporetech/dorado:shaa5cd803bdb5f3cac5c612e47ea6391b882861b8b # Dorado
singularity build modkit.sif docker://ontresearch/modkit:mr398_shab20df82474168dd15e8ace78ff38b8bcb8b7b6fb # Modkit
singularity build samtools.sif docker://biocontainers/samtools:v1.9-4-deb_cv1 # Samtools

cd ..

# Create the genomic reference file
mkdir -p reference
cd reference

# Download the genome reference
GENOME_URL="https://ftp.ensembl.org/pub/release-112/fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna.alt.fa.gz"
wget -O Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz "$GENOME_URL"

if [ $? -eq 0 ]; then
    echo "Download successful."
else
    echo "Error while downloading."
    exit 1
fi

gunzip Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz
echo "The human genome has been downloaded and unzipped into /methylation_analysis/reference."
cd ..

# Convert FAST5 to POD5
mkdir -p ./data_pod5

data_folder=$(find "$data" -mindepth 1 -maxdepth 1 -type d)
destination="./data_pod5"

for folder in $data_folder; do
    id_patient=$(basename "$folder")
    mkdir -p "$destination/$id_patient"
    
    singularity exec --nv ./image_singularity/fast5_to_pod5.sif pod5 convert fast5 "$folder"/*.fast5 --output "$destination/$id_patient" --one-to-one "$folder"
done
echo "All Fast5 files are converted"

# Base Calling - Dorado 
mkdir ./result_dorado

data_folder=$(find ./data_pod5 -mindepth 1 -maxdepth 1 -type d)

for folder in $data_folder; do
    id_patient=$(basename "$folder")

    singularity exec --nv ./image_singularity/dorado.sif dorado basecaller --reference ./reference/*.fa /models/dna_r10.4.1_e8.2_400bps_hac@v4.1.0 "$folder" --modified-bases-models /models/dna_r10.4.1_e8.2_400bps_hac@v4.1.0_5mCG_5hmCG@v2 > ./result_dorado/"$id_patient.bam"
done
echo "Base Calling successful"

# Indexing and sorted BAM files
bam_file=$(find ./result_dorado/*.bam)

for bam in $bam_file; do
    id_patient=$(basename "$bam" .bam)
    sorted_bam="./result_dorado/${id_patient}_sorted.bam"
    
    singularity exec --nv ./image_singularity/samtools.sif samtools sort -o "$sorted_bam" "$bam"
    
    singularity exec --nv ./image_singularity/samtools.sif samtools index "$sorted_bam"
done
echo "Indexing and sorted BAM files successful"

# Methylation Calling with Modkit
mkdir ./result_modkit

bam_file_sorted=$(find ./result_dorado/*_sorted.bam)

for bam in $bam_file_sorted; do 
    id_patient=$(basename "$bam" _sorted.bam)
    
    singularity exec --nv ./image_singularity/modkit.sif modkit pileup "$bam" ./result_modkit/"$id_patient.bed" --ref ./reference/*.fa --combine-strands --cpg
done
echo "Methylation Calling successful"

# Filtering BED files
bed_file=$(find ./result_modkit/*.bed)

for bed in $bed_file; do
    id_patient=$(basename "$bed" .bed)
    awk '$4=="m"' "$bed" > "./result_modkit/${id_patient}_filtered.bed"
done
echo "Filtering is over"
echo "Process completed successfully!"



